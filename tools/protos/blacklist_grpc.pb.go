// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: protos/blacklist.proto

package blacklist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlacklistClient is the client API for Blacklist service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlacklistClient interface {
	GetBlacklistRecordById(ctx context.Context, in *BlacklistGetRequest, opts ...grpc.CallOption) (*BlacklistRecordDto, error)
	GetBlacklistRecordBatch(ctx context.Context, opts ...grpc.CallOption) (Blacklist_GetBlacklistRecordBatchClient, error)
	SaveBlacklistRecord(ctx context.Context, in *BlacklistRecordDto, opts ...grpc.CallOption) (*BlacklistRecordDto, error)
	SaveBlacklistRecordBatch(ctx context.Context, opts ...grpc.CallOption) (Blacklist_SaveBlacklistRecordBatchClient, error)
	SaveRestrictionIntoRecord(ctx context.Context, in *SaveRestrictionRequest, opts ...grpc.CallOption) (*BlacklistRecordDto, error)
	SaveBatchRestrictionIntoRecord(ctx context.Context, opts ...grpc.CallOption) (Blacklist_SaveBatchRestrictionIntoRecordClient, error)
	DeleteRestrictionFromRecord(ctx context.Context, in *DeleteRestrictionRequest, opts ...grpc.CallOption) (*BlacklistRecordDto, error)
	DeleteBatchRestrictionFromRecord(ctx context.Context, opts ...grpc.CallOption) (Blacklist_DeleteBatchRestrictionFromRecordClient, error)
}

type blacklistClient struct {
	cc grpc.ClientConnInterface
}

func NewBlacklistClient(cc grpc.ClientConnInterface) BlacklistClient {
	return &blacklistClient{cc}
}

func (c *blacklistClient) GetBlacklistRecordById(ctx context.Context, in *BlacklistGetRequest, opts ...grpc.CallOption) (*BlacklistRecordDto, error) {
	out := new(BlacklistRecordDto)
	err := c.cc.Invoke(ctx, "/Blacklist/GetBlacklistRecordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blacklistClient) GetBlacklistRecordBatch(ctx context.Context, opts ...grpc.CallOption) (Blacklist_GetBlacklistRecordBatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Blacklist_ServiceDesc.Streams[0], "/Blacklist/GetBlacklistRecordBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &blacklistGetBlacklistRecordBatchClient{stream}
	return x, nil
}

type Blacklist_GetBlacklistRecordBatchClient interface {
	Send(*BlacklistBatchGetRequest) error
	Recv() (*BlacklistRecordDto, error)
	grpc.ClientStream
}

type blacklistGetBlacklistRecordBatchClient struct {
	grpc.ClientStream
}

func (x *blacklistGetBlacklistRecordBatchClient) Send(m *BlacklistBatchGetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blacklistGetBlacklistRecordBatchClient) Recv() (*BlacklistRecordDto, error) {
	m := new(BlacklistRecordDto)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blacklistClient) SaveBlacklistRecord(ctx context.Context, in *BlacklistRecordDto, opts ...grpc.CallOption) (*BlacklistRecordDto, error) {
	out := new(BlacklistRecordDto)
	err := c.cc.Invoke(ctx, "/Blacklist/SaveBlacklistRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blacklistClient) SaveBlacklistRecordBatch(ctx context.Context, opts ...grpc.CallOption) (Blacklist_SaveBlacklistRecordBatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Blacklist_ServiceDesc.Streams[1], "/Blacklist/SaveBlacklistRecordBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &blacklistSaveBlacklistRecordBatchClient{stream}
	return x, nil
}

type Blacklist_SaveBlacklistRecordBatchClient interface {
	Send(*BlacklistBatchSaveRequest) error
	Recv() (*BlacklistRecordDto, error)
	grpc.ClientStream
}

type blacklistSaveBlacklistRecordBatchClient struct {
	grpc.ClientStream
}

func (x *blacklistSaveBlacklistRecordBatchClient) Send(m *BlacklistBatchSaveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blacklistSaveBlacklistRecordBatchClient) Recv() (*BlacklistRecordDto, error) {
	m := new(BlacklistRecordDto)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blacklistClient) SaveRestrictionIntoRecord(ctx context.Context, in *SaveRestrictionRequest, opts ...grpc.CallOption) (*BlacklistRecordDto, error) {
	out := new(BlacklistRecordDto)
	err := c.cc.Invoke(ctx, "/Blacklist/SaveRestrictionIntoRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blacklistClient) SaveBatchRestrictionIntoRecord(ctx context.Context, opts ...grpc.CallOption) (Blacklist_SaveBatchRestrictionIntoRecordClient, error) {
	stream, err := c.cc.NewStream(ctx, &Blacklist_ServiceDesc.Streams[2], "/Blacklist/SaveBatchRestrictionIntoRecord", opts...)
	if err != nil {
		return nil, err
	}
	x := &blacklistSaveBatchRestrictionIntoRecordClient{stream}
	return x, nil
}

type Blacklist_SaveBatchRestrictionIntoRecordClient interface {
	Send(*SaveRestrictionRequest) error
	Recv() (*BlacklistRecordDto, error)
	grpc.ClientStream
}

type blacklistSaveBatchRestrictionIntoRecordClient struct {
	grpc.ClientStream
}

func (x *blacklistSaveBatchRestrictionIntoRecordClient) Send(m *SaveRestrictionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blacklistSaveBatchRestrictionIntoRecordClient) Recv() (*BlacklistRecordDto, error) {
	m := new(BlacklistRecordDto)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blacklistClient) DeleteRestrictionFromRecord(ctx context.Context, in *DeleteRestrictionRequest, opts ...grpc.CallOption) (*BlacklistRecordDto, error) {
	out := new(BlacklistRecordDto)
	err := c.cc.Invoke(ctx, "/Blacklist/DeleteRestrictionFromRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blacklistClient) DeleteBatchRestrictionFromRecord(ctx context.Context, opts ...grpc.CallOption) (Blacklist_DeleteBatchRestrictionFromRecordClient, error) {
	stream, err := c.cc.NewStream(ctx, &Blacklist_ServiceDesc.Streams[3], "/Blacklist/DeleteBatchRestrictionFromRecord", opts...)
	if err != nil {
		return nil, err
	}
	x := &blacklistDeleteBatchRestrictionFromRecordClient{stream}
	return x, nil
}

type Blacklist_DeleteBatchRestrictionFromRecordClient interface {
	Send(*DeleteRestrictionRequest) error
	Recv() (*BlacklistRecordDto, error)
	grpc.ClientStream
}

type blacklistDeleteBatchRestrictionFromRecordClient struct {
	grpc.ClientStream
}

func (x *blacklistDeleteBatchRestrictionFromRecordClient) Send(m *DeleteRestrictionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blacklistDeleteBatchRestrictionFromRecordClient) Recv() (*BlacklistRecordDto, error) {
	m := new(BlacklistRecordDto)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlacklistServer is the server API for Blacklist service.
// All implementations must embed UnimplementedBlacklistServer
// for forward compatibility
type BlacklistServer interface {
	GetBlacklistRecordById(context.Context, *BlacklistGetRequest) (*BlacklistRecordDto, error)
	GetBlacklistRecordBatch(Blacklist_GetBlacklistRecordBatchServer) error
	SaveBlacklistRecord(context.Context, *BlacklistRecordDto) (*BlacklistRecordDto, error)
	SaveBlacklistRecordBatch(Blacklist_SaveBlacklistRecordBatchServer) error
	SaveRestrictionIntoRecord(context.Context, *SaveRestrictionRequest) (*BlacklistRecordDto, error)
	SaveBatchRestrictionIntoRecord(Blacklist_SaveBatchRestrictionIntoRecordServer) error
	DeleteRestrictionFromRecord(context.Context, *DeleteRestrictionRequest) (*BlacklistRecordDto, error)
	DeleteBatchRestrictionFromRecord(Blacklist_DeleteBatchRestrictionFromRecordServer) error
	mustEmbedUnimplementedBlacklistServer()
}

// UnimplementedBlacklistServer must be embedded to have forward compatible implementations.
type UnimplementedBlacklistServer struct {
}

func (UnimplementedBlacklistServer) GetBlacklistRecordById(context.Context, *BlacklistGetRequest) (*BlacklistRecordDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlacklistRecordById not implemented")
}
func (UnimplementedBlacklistServer) GetBlacklistRecordBatch(Blacklist_GetBlacklistRecordBatchServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBlacklistRecordBatch not implemented")
}
func (UnimplementedBlacklistServer) SaveBlacklistRecord(context.Context, *BlacklistRecordDto) (*BlacklistRecordDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBlacklistRecord not implemented")
}
func (UnimplementedBlacklistServer) SaveBlacklistRecordBatch(Blacklist_SaveBlacklistRecordBatchServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveBlacklistRecordBatch not implemented")
}
func (UnimplementedBlacklistServer) SaveRestrictionIntoRecord(context.Context, *SaveRestrictionRequest) (*BlacklistRecordDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRestrictionIntoRecord not implemented")
}
func (UnimplementedBlacklistServer) SaveBatchRestrictionIntoRecord(Blacklist_SaveBatchRestrictionIntoRecordServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveBatchRestrictionIntoRecord not implemented")
}
func (UnimplementedBlacklistServer) DeleteRestrictionFromRecord(context.Context, *DeleteRestrictionRequest) (*BlacklistRecordDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRestrictionFromRecord not implemented")
}
func (UnimplementedBlacklistServer) DeleteBatchRestrictionFromRecord(Blacklist_DeleteBatchRestrictionFromRecordServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteBatchRestrictionFromRecord not implemented")
}
func (UnimplementedBlacklistServer) mustEmbedUnimplementedBlacklistServer() {}

// UnsafeBlacklistServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlacklistServer will
// result in compilation errors.
type UnsafeBlacklistServer interface {
	mustEmbedUnimplementedBlacklistServer()
}

func RegisterBlacklistServer(s grpc.ServiceRegistrar, srv BlacklistServer) {
	s.RegisterService(&Blacklist_ServiceDesc, srv)
}

func _Blacklist_GetBlacklistRecordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlacklistGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlacklistServer).GetBlacklistRecordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blacklist/GetBlacklistRecordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlacklistServer).GetBlacklistRecordById(ctx, req.(*BlacklistGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blacklist_GetBlacklistRecordBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlacklistServer).GetBlacklistRecordBatch(&blacklistGetBlacklistRecordBatchServer{stream})
}

type Blacklist_GetBlacklistRecordBatchServer interface {
	Send(*BlacklistRecordDto) error
	Recv() (*BlacklistBatchGetRequest, error)
	grpc.ServerStream
}

type blacklistGetBlacklistRecordBatchServer struct {
	grpc.ServerStream
}

func (x *blacklistGetBlacklistRecordBatchServer) Send(m *BlacklistRecordDto) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blacklistGetBlacklistRecordBatchServer) Recv() (*BlacklistBatchGetRequest, error) {
	m := new(BlacklistBatchGetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Blacklist_SaveBlacklistRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlacklistRecordDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlacklistServer).SaveBlacklistRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blacklist/SaveBlacklistRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlacklistServer).SaveBlacklistRecord(ctx, req.(*BlacklistRecordDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blacklist_SaveBlacklistRecordBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlacklistServer).SaveBlacklistRecordBatch(&blacklistSaveBlacklistRecordBatchServer{stream})
}

type Blacklist_SaveBlacklistRecordBatchServer interface {
	Send(*BlacklistRecordDto) error
	Recv() (*BlacklistBatchSaveRequest, error)
	grpc.ServerStream
}

type blacklistSaveBlacklistRecordBatchServer struct {
	grpc.ServerStream
}

func (x *blacklistSaveBlacklistRecordBatchServer) Send(m *BlacklistRecordDto) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blacklistSaveBlacklistRecordBatchServer) Recv() (*BlacklistBatchSaveRequest, error) {
	m := new(BlacklistBatchSaveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Blacklist_SaveRestrictionIntoRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRestrictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlacklistServer).SaveRestrictionIntoRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blacklist/SaveRestrictionIntoRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlacklistServer).SaveRestrictionIntoRecord(ctx, req.(*SaveRestrictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blacklist_SaveBatchRestrictionIntoRecord_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlacklistServer).SaveBatchRestrictionIntoRecord(&blacklistSaveBatchRestrictionIntoRecordServer{stream})
}

type Blacklist_SaveBatchRestrictionIntoRecordServer interface {
	Send(*BlacklistRecordDto) error
	Recv() (*SaveRestrictionRequest, error)
	grpc.ServerStream
}

type blacklistSaveBatchRestrictionIntoRecordServer struct {
	grpc.ServerStream
}

func (x *blacklistSaveBatchRestrictionIntoRecordServer) Send(m *BlacklistRecordDto) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blacklistSaveBatchRestrictionIntoRecordServer) Recv() (*SaveRestrictionRequest, error) {
	m := new(SaveRestrictionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Blacklist_DeleteRestrictionFromRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRestrictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlacklistServer).DeleteRestrictionFromRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blacklist/DeleteRestrictionFromRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlacklistServer).DeleteRestrictionFromRecord(ctx, req.(*DeleteRestrictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blacklist_DeleteBatchRestrictionFromRecord_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlacklistServer).DeleteBatchRestrictionFromRecord(&blacklistDeleteBatchRestrictionFromRecordServer{stream})
}

type Blacklist_DeleteBatchRestrictionFromRecordServer interface {
	Send(*BlacklistRecordDto) error
	Recv() (*DeleteRestrictionRequest, error)
	grpc.ServerStream
}

type blacklistDeleteBatchRestrictionFromRecordServer struct {
	grpc.ServerStream
}

func (x *blacklistDeleteBatchRestrictionFromRecordServer) Send(m *BlacklistRecordDto) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blacklistDeleteBatchRestrictionFromRecordServer) Recv() (*DeleteRestrictionRequest, error) {
	m := new(DeleteRestrictionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Blacklist_ServiceDesc is the grpc.ServiceDesc for Blacklist service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Blacklist_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Blacklist",
	HandlerType: (*BlacklistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlacklistRecordById",
			Handler:    _Blacklist_GetBlacklistRecordById_Handler,
		},
		{
			MethodName: "SaveBlacklistRecord",
			Handler:    _Blacklist_SaveBlacklistRecord_Handler,
		},
		{
			MethodName: "SaveRestrictionIntoRecord",
			Handler:    _Blacklist_SaveRestrictionIntoRecord_Handler,
		},
		{
			MethodName: "DeleteRestrictionFromRecord",
			Handler:    _Blacklist_DeleteRestrictionFromRecord_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBlacklistRecordBatch",
			Handler:       _Blacklist_GetBlacklistRecordBatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SaveBlacklistRecordBatch",
			Handler:       _Blacklist_SaveBlacklistRecordBatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SaveBatchRestrictionIntoRecord",
			Handler:       _Blacklist_SaveBatchRestrictionIntoRecord_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteBatchRestrictionFromRecord",
			Handler:       _Blacklist_DeleteBatchRestrictionFromRecord_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/blacklist.proto",
}
