// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: tools/protos/blacklist.proto

package blacklist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlacklistClient is the client API for Blacklist service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlacklistClient interface {
	GetBlacklistRecord(ctx context.Context, in *BlacklistRecordOperationRequest, opts ...grpc.CallOption) (*BlacklistRecordDto, error)
	GetBlacklistRecordBatch(ctx context.Context, opts ...grpc.CallOption) (Blacklist_GetBlacklistRecordBatchClient, error)
	GetBlacklistRecordsQuery(ctx context.Context, in *BlacklistRecordQueriesRequest, opts ...grpc.CallOption) (Blacklist_GetBlacklistRecordsQueryClient, error)
	GetBlacklistRecordsBetweenQuery(ctx context.Context, in *BlacklistRecordBetweenQueriesRequest, opts ...grpc.CallOption) (Blacklist_GetBlacklistRecordsBetweenQueryClient, error)
	SaveBlacklistRecord(ctx context.Context, in *BlacklistRecordOperationRequest, opts ...grpc.CallOption) (*BlacklistRecordDto, error)
	SaveBlacklistRecordBatch(ctx context.Context, opts ...grpc.CallOption) (Blacklist_SaveBlacklistRecordBatchClient, error)
	DeleteBlacklistRecord(ctx context.Context, in *BlacklistRecordOperationRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteBatchBlacklistRecord(ctx context.Context, opts ...grpc.CallOption) (Blacklist_DeleteBatchBlacklistRecordClient, error)
}

type blacklistClient struct {
	cc grpc.ClientConnInterface
}

func NewBlacklistClient(cc grpc.ClientConnInterface) BlacklistClient {
	return &blacklistClient{cc}
}

func (c *blacklistClient) GetBlacklistRecord(ctx context.Context, in *BlacklistRecordOperationRequest, opts ...grpc.CallOption) (*BlacklistRecordDto, error) {
	out := new(BlacklistRecordDto)
	err := c.cc.Invoke(ctx, "/Blacklist/GetBlacklistRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blacklistClient) GetBlacklistRecordBatch(ctx context.Context, opts ...grpc.CallOption) (Blacklist_GetBlacklistRecordBatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Blacklist_ServiceDesc.Streams[0], "/Blacklist/GetBlacklistRecordBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &blacklistGetBlacklistRecordBatchClient{stream}
	return x, nil
}

type Blacklist_GetBlacklistRecordBatchClient interface {
	Send(*BlacklistBatchRequest) error
	Recv() (*BlacklistRecordDto, error)
	grpc.ClientStream
}

type blacklistGetBlacklistRecordBatchClient struct {
	grpc.ClientStream
}

func (x *blacklistGetBlacklistRecordBatchClient) Send(m *BlacklistBatchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blacklistGetBlacklistRecordBatchClient) Recv() (*BlacklistRecordDto, error) {
	m := new(BlacklistRecordDto)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blacklistClient) GetBlacklistRecordsQuery(ctx context.Context, in *BlacklistRecordQueriesRequest, opts ...grpc.CallOption) (Blacklist_GetBlacklistRecordsQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &Blacklist_ServiceDesc.Streams[1], "/Blacklist/GetBlacklistRecordsQuery", opts...)
	if err != nil {
		return nil, err
	}
	x := &blacklistGetBlacklistRecordsQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blacklist_GetBlacklistRecordsQueryClient interface {
	Recv() (*BlacklistRecordDto, error)
	grpc.ClientStream
}

type blacklistGetBlacklistRecordsQueryClient struct {
	grpc.ClientStream
}

func (x *blacklistGetBlacklistRecordsQueryClient) Recv() (*BlacklistRecordDto, error) {
	m := new(BlacklistRecordDto)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blacklistClient) GetBlacklistRecordsBetweenQuery(ctx context.Context, in *BlacklistRecordBetweenQueriesRequest, opts ...grpc.CallOption) (Blacklist_GetBlacklistRecordsBetweenQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &Blacklist_ServiceDesc.Streams[2], "/Blacklist/GetBlacklistRecordsBetweenQuery", opts...)
	if err != nil {
		return nil, err
	}
	x := &blacklistGetBlacklistRecordsBetweenQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blacklist_GetBlacklistRecordsBetweenQueryClient interface {
	Recv() (*BlacklistRecordDto, error)
	grpc.ClientStream
}

type blacklistGetBlacklistRecordsBetweenQueryClient struct {
	grpc.ClientStream
}

func (x *blacklistGetBlacklistRecordsBetweenQueryClient) Recv() (*BlacklistRecordDto, error) {
	m := new(BlacklistRecordDto)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blacklistClient) SaveBlacklistRecord(ctx context.Context, in *BlacklistRecordOperationRequest, opts ...grpc.CallOption) (*BlacklistRecordDto, error) {
	out := new(BlacklistRecordDto)
	err := c.cc.Invoke(ctx, "/Blacklist/SaveBlacklistRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blacklistClient) SaveBlacklistRecordBatch(ctx context.Context, opts ...grpc.CallOption) (Blacklist_SaveBlacklistRecordBatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Blacklist_ServiceDesc.Streams[3], "/Blacklist/SaveBlacklistRecordBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &blacklistSaveBlacklistRecordBatchClient{stream}
	return x, nil
}

type Blacklist_SaveBlacklistRecordBatchClient interface {
	Send(*BlacklistBatchRequest) error
	Recv() (*BlacklistRecordDto, error)
	grpc.ClientStream
}

type blacklistSaveBlacklistRecordBatchClient struct {
	grpc.ClientStream
}

func (x *blacklistSaveBlacklistRecordBatchClient) Send(m *BlacklistBatchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blacklistSaveBlacklistRecordBatchClient) Recv() (*BlacklistRecordDto, error) {
	m := new(BlacklistRecordDto)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blacklistClient) DeleteBlacklistRecord(ctx context.Context, in *BlacklistRecordOperationRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Blacklist/DeleteBlacklistRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blacklistClient) DeleteBatchBlacklistRecord(ctx context.Context, opts ...grpc.CallOption) (Blacklist_DeleteBatchBlacklistRecordClient, error) {
	stream, err := c.cc.NewStream(ctx, &Blacklist_ServiceDesc.Streams[4], "/Blacklist/DeleteBatchBlacklistRecord", opts...)
	if err != nil {
		return nil, err
	}
	x := &blacklistDeleteBatchBlacklistRecordClient{stream}
	return x, nil
}

type Blacklist_DeleteBatchBlacklistRecordClient interface {
	Send(*BlacklistBatchRequest) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type blacklistDeleteBatchBlacklistRecordClient struct {
	grpc.ClientStream
}

func (x *blacklistDeleteBatchBlacklistRecordClient) Send(m *BlacklistBatchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blacklistDeleteBatchBlacklistRecordClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlacklistServer is the server API for Blacklist service.
// All implementations must embed UnimplementedBlacklistServer
// for forward compatibility
type BlacklistServer interface {
	GetBlacklistRecord(context.Context, *BlacklistRecordOperationRequest) (*BlacklistRecordDto, error)
	GetBlacklistRecordBatch(Blacklist_GetBlacklistRecordBatchServer) error
	GetBlacklistRecordsQuery(*BlacklistRecordQueriesRequest, Blacklist_GetBlacklistRecordsQueryServer) error
	GetBlacklistRecordsBetweenQuery(*BlacklistRecordBetweenQueriesRequest, Blacklist_GetBlacklistRecordsBetweenQueryServer) error
	SaveBlacklistRecord(context.Context, *BlacklistRecordOperationRequest) (*BlacklistRecordDto, error)
	SaveBlacklistRecordBatch(Blacklist_SaveBlacklistRecordBatchServer) error
	DeleteBlacklistRecord(context.Context, *BlacklistRecordOperationRequest) (*Empty, error)
	DeleteBatchBlacklistRecord(Blacklist_DeleteBatchBlacklistRecordServer) error
	mustEmbedUnimplementedBlacklistServer()
}

// UnimplementedBlacklistServer must be embedded to have forward compatible implementations.
type UnimplementedBlacklistServer struct {
}

func (UnimplementedBlacklistServer) GetBlacklistRecord(context.Context, *BlacklistRecordOperationRequest) (*BlacklistRecordDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlacklistRecord not implemented")
}
func (UnimplementedBlacklistServer) GetBlacklistRecordBatch(Blacklist_GetBlacklistRecordBatchServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBlacklistRecordBatch not implemented")
}
func (UnimplementedBlacklistServer) GetBlacklistRecordsQuery(*BlacklistRecordQueriesRequest, Blacklist_GetBlacklistRecordsQueryServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBlacklistRecordsQuery not implemented")
}
func (UnimplementedBlacklistServer) GetBlacklistRecordsBetweenQuery(*BlacklistRecordBetweenQueriesRequest, Blacklist_GetBlacklistRecordsBetweenQueryServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBlacklistRecordsBetweenQuery not implemented")
}
func (UnimplementedBlacklistServer) SaveBlacklistRecord(context.Context, *BlacklistRecordOperationRequest) (*BlacklistRecordDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBlacklistRecord not implemented")
}
func (UnimplementedBlacklistServer) SaveBlacklistRecordBatch(Blacklist_SaveBlacklistRecordBatchServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveBlacklistRecordBatch not implemented")
}
func (UnimplementedBlacklistServer) DeleteBlacklistRecord(context.Context, *BlacklistRecordOperationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlacklistRecord not implemented")
}
func (UnimplementedBlacklistServer) DeleteBatchBlacklistRecord(Blacklist_DeleteBatchBlacklistRecordServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteBatchBlacklistRecord not implemented")
}
func (UnimplementedBlacklistServer) mustEmbedUnimplementedBlacklistServer() {}

// UnsafeBlacklistServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlacklistServer will
// result in compilation errors.
type UnsafeBlacklistServer interface {
	mustEmbedUnimplementedBlacklistServer()
}

func RegisterBlacklistServer(s grpc.ServiceRegistrar, srv BlacklistServer) {
	s.RegisterService(&Blacklist_ServiceDesc, srv)
}

func _Blacklist_GetBlacklistRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlacklistRecordOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlacklistServer).GetBlacklistRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blacklist/GetBlacklistRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlacklistServer).GetBlacklistRecord(ctx, req.(*BlacklistRecordOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blacklist_GetBlacklistRecordBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlacklistServer).GetBlacklistRecordBatch(&blacklistGetBlacklistRecordBatchServer{stream})
}

type Blacklist_GetBlacklistRecordBatchServer interface {
	Send(*BlacklistRecordDto) error
	Recv() (*BlacklistBatchRequest, error)
	grpc.ServerStream
}

type blacklistGetBlacklistRecordBatchServer struct {
	grpc.ServerStream
}

func (x *blacklistGetBlacklistRecordBatchServer) Send(m *BlacklistRecordDto) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blacklistGetBlacklistRecordBatchServer) Recv() (*BlacklistBatchRequest, error) {
	m := new(BlacklistBatchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Blacklist_GetBlacklistRecordsQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlacklistRecordQueriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlacklistServer).GetBlacklistRecordsQuery(m, &blacklistGetBlacklistRecordsQueryServer{stream})
}

type Blacklist_GetBlacklistRecordsQueryServer interface {
	Send(*BlacklistRecordDto) error
	grpc.ServerStream
}

type blacklistGetBlacklistRecordsQueryServer struct {
	grpc.ServerStream
}

func (x *blacklistGetBlacklistRecordsQueryServer) Send(m *BlacklistRecordDto) error {
	return x.ServerStream.SendMsg(m)
}

func _Blacklist_GetBlacklistRecordsBetweenQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlacklistRecordBetweenQueriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlacklistServer).GetBlacklistRecordsBetweenQuery(m, &blacklistGetBlacklistRecordsBetweenQueryServer{stream})
}

type Blacklist_GetBlacklistRecordsBetweenQueryServer interface {
	Send(*BlacklistRecordDto) error
	grpc.ServerStream
}

type blacklistGetBlacklistRecordsBetweenQueryServer struct {
	grpc.ServerStream
}

func (x *blacklistGetBlacklistRecordsBetweenQueryServer) Send(m *BlacklistRecordDto) error {
	return x.ServerStream.SendMsg(m)
}

func _Blacklist_SaveBlacklistRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlacklistRecordOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlacklistServer).SaveBlacklistRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blacklist/SaveBlacklistRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlacklistServer).SaveBlacklistRecord(ctx, req.(*BlacklistRecordOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blacklist_SaveBlacklistRecordBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlacklistServer).SaveBlacklistRecordBatch(&blacklistSaveBlacklistRecordBatchServer{stream})
}

type Blacklist_SaveBlacklistRecordBatchServer interface {
	Send(*BlacklistRecordDto) error
	Recv() (*BlacklistBatchRequest, error)
	grpc.ServerStream
}

type blacklistSaveBlacklistRecordBatchServer struct {
	grpc.ServerStream
}

func (x *blacklistSaveBlacklistRecordBatchServer) Send(m *BlacklistRecordDto) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blacklistSaveBlacklistRecordBatchServer) Recv() (*BlacklistBatchRequest, error) {
	m := new(BlacklistBatchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Blacklist_DeleteBlacklistRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlacklistRecordOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlacklistServer).DeleteBlacklistRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blacklist/DeleteBlacklistRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlacklistServer).DeleteBlacklistRecord(ctx, req.(*BlacklistRecordOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blacklist_DeleteBatchBlacklistRecord_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlacklistServer).DeleteBatchBlacklistRecord(&blacklistDeleteBatchBlacklistRecordServer{stream})
}

type Blacklist_DeleteBatchBlacklistRecordServer interface {
	SendAndClose(*Empty) error
	Recv() (*BlacklistBatchRequest, error)
	grpc.ServerStream
}

type blacklistDeleteBatchBlacklistRecordServer struct {
	grpc.ServerStream
}

func (x *blacklistDeleteBatchBlacklistRecordServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blacklistDeleteBatchBlacklistRecordServer) Recv() (*BlacklistBatchRequest, error) {
	m := new(BlacklistBatchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Blacklist_ServiceDesc is the grpc.ServiceDesc for Blacklist service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Blacklist_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Blacklist",
	HandlerType: (*BlacklistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlacklistRecord",
			Handler:    _Blacklist_GetBlacklistRecord_Handler,
		},
		{
			MethodName: "SaveBlacklistRecord",
			Handler:    _Blacklist_SaveBlacklistRecord_Handler,
		},
		{
			MethodName: "DeleteBlacklistRecord",
			Handler:    _Blacklist_DeleteBlacklistRecord_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBlacklistRecordBatch",
			Handler:       _Blacklist_GetBlacklistRecordBatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetBlacklistRecordsQuery",
			Handler:       _Blacklist_GetBlacklistRecordsQuery_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBlacklistRecordsBetweenQuery",
			Handler:       _Blacklist_GetBlacklistRecordsBetweenQuery_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SaveBlacklistRecordBatch",
			Handler:       _Blacklist_SaveBlacklistRecordBatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteBatchBlacklistRecord",
			Handler:       _Blacklist_DeleteBatchBlacklistRecord_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "tools/protos/blacklist.proto",
}
